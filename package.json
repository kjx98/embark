{
  "devDependencies": {
    "babel-eslint": "10.0.3",
    "chalk": "2.4.2",
    "coveralls": "3.0.9",
    "eslint": "6.2.2",
    "find-up": "4.1.0",
    "form-data": "2.5.1",
    "fs-extra": "8.1.0",
    "lerna": "3.19.0",
    "minimist": "1.2.0",
    "npm-run-all": "4.1.5",
    "nyc": "13.1.0",
    "rimraf": "3.0.0"
  },
  "engines": {
    "node": ">=10.17.0 <12.0.0",
    "npm": ">=6.11.3",
    "yarn": ">=1.19.1"
  },
  "license": "MIT",
  "name": "root",
  "private": true,
  "scripts": {
    "build": "node scripts/monorun --stream build",
    "build:no-ui": "npm run build -- --ignore embark-ui",
    "ci": "node scripts/monorun --ignore embark-dapp-* --stream ci",
    "ci:dapps": "lerna run --concurrency=1 --scope embark-dapp-* --stream ci",
    "ci:full": "npm-run-all cwtree \"ci -- --concurrency={1}\" ci:dapps cwtree -- 1",
    "clean": "node scripts/monorun --stream clean",
    "clean:full": "npx npm-run-all clean clean:top",
    "clean:top": "npm run reset:top && npx rimraf node_modules",
    "coverage": "npm-run-all coverage:collect coverage:report",
    "coverage:collect": "node scripts/coverage-collect",
    "coverage:coveralls": "nyc report --reporter=text-lcov | coveralls || exit 0",
    "coverage:report": "node scripts/coverage-report",
    "coveralls": "npm-run-all coverage:collect coverage:coveralls",
    "cwtree": "node scripts/check-working-tree",
    "deploy:site": "node site/deploy-site",
    "globalize": "node scripts/globalize",
    "lint": "node scripts/monorun --parallel lint",
    "package": "lerna exec --concurrency=1 --no-private --stream -- npm pack",
    "postclean": "npx lerna clean --yes",
    "postreboot": "yarn install",
    "postreboot:full": "yarn install",
    "preci:full": "yarn install",
    "preqa:full": "yarn install",
    "qa": "node scripts/monorun --ignore embark-dapp-* --stream qa",
    "qa:dapps": "lerna run --concurrency=1 --scope embark-dapp-* --stream qa",
    "qa:full": "npm-run-all cwtree reboot:full cwtree \"qa -- --concurrency={1}\" qa:dapps cwtree -- 1",
    "reboot": "npm run clean",
    "reboot:full": "npm run clean:full",
    "release": "node scripts/release",
    "reset": "node scripts/monorun --stream reset && npm-run-all reset:top reset:tsbuildinfo",
    "reset:top": "npx rimraf .tsconfig.collective.json .nyc_output coverage",
    "reset:tsbuildinfo": "npx lerna exec --parallel -- npx rimraf node_modules/.cache/tsc",
    "start": "node scripts/monorun --parallel start",
    "test": "node scripts/monorun --ignore embark-dapp-* --stream test",
    "test:dapps": "lerna run --concurrency=1 --scope embark-dapp-* --stream test",
    "test:full": "npm-run-all test test:dapps",
    "typecheck": "node scripts/monorun --stream typecheck",
    "typecheck:clean": "npm run typecheck -- -- -- --clean",
    "watch": "node scripts/monorun --parallel watch",
    "watch:build": "node scripts/monorun --parallel watch:build",
    "watch:lint": "node scripts/monorun --parallel watch:lint",
    "watch:test": "node scripts/monorun --ignore embark-dapp-* --parallel watch:test",
    "watch:typecheck": "node scripts/monorun --parallel watch:typecheck"
  },
  "workspaces": {
    "packages": [
      "dapps/templates/*",
      "dapps/tests/*",
      "packages/*",
      "packages/cockpit/*",
      "packages/core/*",
      "packages/embarkjs/*",
      "packages/plugins/*",
      "packages/stack/*",
      "packages/utils/*"
    ],
    "nohoist": [
      "embark-dapp-template-demo/bootstrap",
      "embark-dapp-test-app/embark-dapp-test-service",
      "embark-dapp-test-app/zeppelin-solidity",
      "embark-ui/react-scripts",
      "embark-ui/react-scripts/**",
      "embark/embark-test-contract-0",
      "embark/embark-test-contract-1"
    ]
  }
}
